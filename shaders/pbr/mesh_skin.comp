#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_buffer_reference2: require

#include "../utils/packed_vertex.glsl"
#include "../utils/transform.glsl"

layout(buffer_reference, std430) buffer VertexBufferPtr{ packed_vertex_t v[]; };
layout(buffer_reference, std430) buffer BoneVertexBufferPtr{ bone_vertex_data_t v[]; };
layout(buffer_reference, std430) buffer BoneBufferPtr{ transform_t v[]; };

struct skin_compute_params_t
{
    uint num_vertices;
    VertexBufferPtr vertex_in;
    BoneVertexBufferPtr bone_vertex_data_in;
    BoneBufferPtr bones_in;
    VertexBufferPtr vertex_out;
};

layout(binding = 0, scalar) readonly buffer SkinParamBuffer
{
    skin_compute_params_t params;
};

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint gid = gl_GlobalInvocationID.x;
    if(gid >= params.num_vertices){ return; }

    Vertex v = unpack(params.vertex_in.v[gid]);

    vec4 bone_weights = vec4(float(params.bone_vertex_data_in.v[gid].weight_x),
                             float(params.bone_vertex_data_in.v[gid].weight_y),
                             float(params.bone_vertex_data_in.v[gid].weight_z),
                             float(params.bone_vertex_data_in.v[gid].weight_w));
    uvec4 bone_ids = uvec4(uint(params.bone_vertex_data_in.v[gid].index_x),
                           uint(params.bone_vertex_data_in.v[gid].index_y),
                           uint(params.bone_vertex_data_in.v[gid].index_z),
                           uint(params.bone_vertex_data_in.v[gid].index_w));

    vec3 new_pos = vec3(0);
    vec3 new_normal = vec3(0);
    vec3 new_tangent = vec3(0);

    for (int i = 0; i < 4; i++)
    {
        new_pos += apply_transform(params.bones_in.v[bone_ids[i]], v.position) * bone_weights[i];
        new_normal += apply_rotation(params.bones_in.v[bone_ids[i]], v.normal) * bone_weights[i];
        new_tangent += apply_rotation(params.bones_in.v[bone_ids[i]], v.tangent) * bone_weights[i];
    }

    v.position = new_pos;
    v.normal = normalize(new_normal);
    v.tangent = normalize(new_tangent);

    // write transformed+packed vertex
    params.vertex_out.v[gid] = pack(v);
}