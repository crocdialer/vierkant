#version 460
#extension GL_EXT_fragment_shading_rate : require
#extension GL_EXT_mesh_shader : require

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_EXT_shader_16bit_storage: require

#extension GL_EXT_shader_explicit_arithmetic_types: require

#include "../renderer/mesh_task_payload.glsl"
#include "../renderer/types.glsl"
#include "../utils/camera.glsl"
#include "../utils/packed_vertex.glsl"

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 64) out;

#define CULLING 0

layout(set = 0, binding = BINDING_VERTICES, scalar) readonly buffer VertexBuffer
{
    packed_vertex_t vertices[];
};

layout(set = 0, binding = BINDING_MESHLETS) readonly buffer MeshletBuffer
{
    meshlet_t meshlets[];
};

layout(set = 0, binding = BINDING_MESHLET_VERTICES) readonly buffer MeshletVertexBuffer
{
    uint meshlet_vertices[];
};

layout(set = 0, binding = BINDING_MESHLET_TRIANGLES) readonly buffer MeshletTriangleBuffer
{
    uint8_t meshlet_triangles[];
};

layout(std140, set = 0, binding = BINDING_MESH_DRAWS) readonly buffer MeshDrawBuffer
{
    mesh_draw_t draws[];
};

layout(std140, binding = BINDING_JITTER_OFFSET) uniform UBOJitter
{
    camera_t camera;
    camera_t last_camera;
};

layout(push_constant) uniform PushConstants
{
    render_context_t context;
};

taskPayloadSharedEXT mesh_task_payload_t task_payload;

layout(location = LOCATION_INDEX_BUNDLE) flat out index_bundle_t indices[];
layout(location = LOCATION_VERTEX_BUNDLE) out VertexData
{
    vec2 tex_coord;
    vec3 normal;
    vec3 tangent;
    vec4 current_position;
    vec4 last_position;
} vertex_out[];

#if CULLING
// needs to match layout(max_vertices = 64)
shared vec3 vertex_clip[64];
#endif

void main()
{
    uint ti = gl_LocalInvocationID.x;
    uint mi = task_payload.meshlet_base_index + uint(task_payload.meshlet_delta_indices[gl_WorkGroupID.x]);
    SetMeshOutputsEXT(meshlets[mi].vertex_count, meshlets[mi].triangle_count);

    matrix_struct_t m = draws[task_payload.object_index].current_matrices;
    matrix_struct_t m_last = draws[task_payload.object_index].last_matrices;

    //    //! would work when MESH_WORKGROUP_SIZE >= max_vertices -> iff >=1 thread per vertex
    //    if(ti < meshlets[mi].vertex_count)
    for(uint i = ti; i < meshlets[mi].vertex_count; i += MESH_WORKGROUP_SIZE)
    {
        uint vi = meshlet_vertices[meshlets[mi].vertex_offset + i];
        const Vertex v = unpack(vertices[vi]);

        vertex_out[i].current_position = camera.projection * camera.view * vec4(apply_transform(m.transform, v.position), 1.0);
        vertex_out[i].last_position = last_camera.projection * last_camera.view * vec4(apply_transform(m_last.transform, v.position), 1.0);

        vec4 jittered_position = vertex_out[i].current_position;
        jittered_position.xy += 2.0 * camera.sample_offset * jittered_position.w;
        gl_MeshVerticesEXT[i].gl_Position = jittered_position;

        indices[i].mesh_draw_index = task_payload.object_index;
        indices[i].material_index = draws[task_payload.object_index].material_index;
        indices[i].meshlet_index = mi;

        vertex_out[i].tex_coord = (m.texture * vec4(v.tex_coord, 0, 1)).xy;
        vertex_out[i].normal = normalize(apply_rotation(m.transform, v.normal));
        vertex_out[i].tangent = normalize(apply_rotation(m.transform, v.tangent));

#if CULLING
        vertex_clip[i] = vec3((jittered_position.xy / jittered_position.w * 0.5 + vec2(0.5)) * context.size,
                              jittered_position.w);
#endif
    }

#if CULLING
    barrier();
#endif

    for(uint i = ti; i < meshlets[mi].triangle_count; i += MESH_WORKGROUP_SIZE)
//    if(ti < meshlets[mi].triangle_count)
    {
        uint base_index = meshlets[mi].triangle_offset + 3 * i;

        uint a = uint(meshlet_triangles[base_index]), b = uint(meshlet_triangles[base_index + 1]),
        c = uint(meshlet_triangles[base_index + 2]);

        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(a, b, c);

//        // TODO: writing this causes a validation-bug (https://github.com/KhronosGroup/glslang/issues/3103)
//        // keep track of primitive-id
//        gl_MeshPrimitivesEXT[i].gl_PrimitiveID = int(base_index / 3);
#if CULLING
        bool culled = false;

        vec2 pa = vertex_clip[a].xy, pb = vertex_clip[b].xy, pc = vertex_clip[c].xy;

        // backface culling + zero-area culling
        vec2 eb = pb - pa;
        vec2 ec = pc - pa;

        culled = culled || (eb.x * ec.y >= eb.y * ec.x);

        // small primitive culling
        vec2 bmin = min(pa, min(pb, pc));
        vec2 bmax = max(pa, max(pb, pc));
        float sbprec = 1.0 / 256.0; // note: this can be set to 1/2^subpixelPrecisionBits

        // note: this is slightly imprecise (doesn't fully match hw behavior and is both too loose and too strict)
        culled = culled || (round(bmin.x - sbprec) == round(bmax.x) || round(bmin.y) == round(bmax.y + sbprec));

        // the computations above are only valid if all vertices are in front of perspective plane
        culled = culled && (vertex_clip[a].z > 0 && vertex_clip[b].z > 0 && vertex_clip[c].z > 0);

        // TODO: writing this causes a validation-bug (https://github.com/KhronosGroup/glslang/issues/3103):
        // "The SPIR-V Capability (FragmentShadingRateKHR) was declared, but none of the requirements were met to use it"
        //! triangle culling hook
        gl_MeshPrimitivesEXT[i].gl_CullPrimitiveEXT = culled;
#endif
    }
}