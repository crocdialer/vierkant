#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_buffer_reference2: require

#include "../renderer/packed_vertex.glsl"
#include "../utils/slerp.glsl"

layout(buffer_reference, std430) buffer VertexBufferPtr{ packed_vertex_t v[]; };
layout(buffer_reference, scalar) buffer MorphVertexBufferPtr{ Vertex v[]; };

struct morph_compute_params_t
{
    VertexBufferPtr vertex_in;
    VertexBufferPtr vertex_out;
    MorphVertexBufferPtr morph_vertex_in;
    uint num_vertices;
    uint morph_count;
    float weights[64];
};

layout(binding = 0, scalar) readonly buffer MorphParamsBuffer
{
    morph_compute_params_t params;
};

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint gid = gl_GlobalInvocationID.x;
    if(gid >= params.num_vertices){ return; }

    Vertex v = unpack(params.vertex_in.v[gid]);
    vec3 new_normal = vec3(0);
    vec3 new_tangent = vec3(0);

    // apply morph-targets
    for(uint i = 0; i < params.morph_count; ++i)
    {
        uint morph_index = i * params.num_vertices + gid;
        Vertex morph_vertex = params.morph_vertex_in.v[morph_index];

        v.position += morph_vertex.position * params.weights[i];
        new_normal += slerp(v.normal, v.normal + morph_vertex.normal, params.weights[i]);
        new_tangent += slerp(v.tangent, v.tangent + morph_vertex.tangent, params.weights[i]);
    }
    v.normal = normalize(new_normal);
    v.tangent = normalize(new_tangent);

    // write transformed+packed vertex
    params.vertex_out.v[gid] = pack(v);
}