#version 460
#extension GL_EXT_mesh_shader : require
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_ballot: require

#include "../renderer/types.glsl"
#include "../renderer/mesh_task_payload.glsl"
#include "../utils/camera.glsl"

layout(set = 0, binding = BINDING_DRAW_COMMANDS) readonly buffer DrawBuffer
{
    indexed_indirect_command_t draw_commands[];
};

layout(set = 0, binding = BINDING_MESHLETS) readonly buffer MeshletBuffer
{
    meshlet_t meshlets[];
};

layout(std140, set = 0, binding = BINDING_MESH_DRAWS) readonly buffer MeshDrawBuffer
{
    mesh_draw_t draws[];
};

layout(std140, binding = BINDING_JITTER_OFFSET) uniform UBOJitter
{
    camera_t camera;
    camera_t last_camera;
};

layout(std140, set = 0, binding = BINDING_MATERIAL) readonly buffer MaterialBuffer
{
    material_struct_t materials[];
};

layout(push_constant) uniform PushConstants
{
    render_context_t context;
};

taskPayloadSharedEXT mesh_task_payload_t task_payload;

// NOTE: local_size_x_id coming from specialization-constant
layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

//! return true if the cone is facing away from camera_position and should be culled
bool cone_cull(vec3 center, float radius, vec3 cone_axis, float cone_cutoff, vec3 camera_position)
{
    return dot(center - camera_position, cone_axis) >= cone_cutoff * length(center - camera_position) + radius;
}

#define CULLING 1

void main()
{
    uint gid = gl_GlobalInvocationID.x;
    const indexed_indirect_command_t draw_command = draw_commands[context.base_draw_index + gl_DrawID];
    if(gid >= draw_command.num_meshlets){ return; }

    uint object_index = draw_command.object_index;
    uint meshlet_base_index = gl_WorkGroupID.x * gl_WorkGroupSize.x + draw_command.base_meshlet;

    uint ti = gl_LocalInvocationID.x;
    uint mi = meshlet_base_index + ti;

    // write payload base-indices
    task_payload.object_index = object_index;
    task_payload.meshlet_base_index = meshlet_base_index;

#if CULLING
    // transform bounding volume and normal-cone
    mat4 m = camera.view * mat4_cast(draws[object_index].current_matrices.transform);
    vec3 cone_axis = normalize(mat3(m) * meshlets[mi].cone_axis);
    float cone_cutoff = meshlets[mi].cone_cutoff;
    vec3 center = (m * vec4(meshlets[mi].sphere_center, 1.0)).xyz;
    float radius = meshlets[mi].sphere_radius * length(m[0].xyz);

    // backface-culling
    bool accept = materials[draws[object_index].material_index].two_sided ||
        !cone_cull(center, radius, cone_axis, cone_cutoff, vec3(0));

    // frustum-culling
    accept = accept && !frustum_cull(center, radius, camera.frustum);

    // TODO: occlusion-culling / visibility recording

    // determine indices/count via ballot
    uvec4 ballot = subgroupBallot(accept);
    uint index = subgroupBallotExclusiveBitCount(ballot);
    uint count = subgroupBallotBitCount(ballot);

    // write payload delta-index
    if (accept){ task_payload.meshlet_delta_indices[index] = uint8_t(ti); }
    EmitMeshTasksEXT(count, 1, 1);

#else
    task_payload.meshlet_delta_indices[ti] = uint8_t(ti);

    // TODO: wonky, emitting too many meshlets in last workgroup
    uint count = gl_WorkGroupSize.x;
    EmitMeshTasksEXT(count, 1, 1);
#endif
}