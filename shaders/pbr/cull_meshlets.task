#version 460
#extension GL_NV_mesh_shader : require
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_ballot: require

#include "../renderer/types.glsl"
#include "../utils/camera.glsl"

//! nv-specific warp-value (use 64 for AMD)
#define LOCAL_SIZE 32

layout(set = 0, binding = BINDING_DRAW_COMMANDS) readonly buffer DrawBuffer
{
    indexed_indirect_command_t draws[];
};

layout(set = 0, binding = BINDING_MESHLETS) readonly buffer MeshletBuffer
{
    meshlet_t meshlets[];
};

layout(std140, set = 0, binding = BINDING_MATRIX) readonly buffer MatrixBuffer
{
    matrix_struct_t matrices[];
};

layout(std140, binding = BINDING_JITTER_OFFSET) uniform UBOJitter
{
    camera_t camera;
    camera_t last_camera;
};

layout(push_constant) uniform PushConstants
{
    render_context_t context;
};

out taskNV TaskBuffer
{
    uint meshlet_indices[LOCAL_SIZE];
    uint object_index;
};

layout(local_size_x = LOCAL_SIZE, local_size_y = 1, local_size_z = 1) in;

bool cone_cull(vec3 center, float radius, vec3 cone_axis, float cone_cutoff, vec3 camera_position)
{
    return dot(center - camera_position, cone_axis) >= cone_cutoff * length(center - camera_position) + radius;
}

#define CULLING 1

void main()
{
    uint gid = gl_GlobalInvocationID.x;
    const indexed_indirect_command_t draw = draws[context.base_draw_index + gl_DrawID];

    if(gid >= draw.num_meshlets)
    {
        gl_TaskCountNV = 0;
        return;
    }

    uint ti = gl_LocalInvocationID.x;
    uint mi = draw.base_meshlet + gid;

    object_index = draw.object_index;

#if CULLING
    // transform bounding volume and normal-cone
    mat3 m = mat3(camera.view * matrices[object_index].modelview);
    vec3 cone_axis = normalize(m * meshlets[mi].cone_axis);
    float cone_cutoff = meshlets[mi].cone_cutoff;
    vec3 center = (camera.view * matrices[object_index].modelview * vec4(meshlets[mi].sphere_center, 1.0)).xyz;
    float radius = meshlets[mi].sphere_radius * length(matrices[object_index].modelview[0].xyz);

    // backface-culling
    bool accept = !cone_cull(center, radius, cone_axis, cone_cutoff, vec3(0));

    // frustum-culling
    accept = accept && !frustum_cull(center, radius, camera.frustum);

    // determine indices/count via ballot
    uvec4 ballot = subgroupBallot(accept);
    uint index = subgroupBallotExclusiveBitCount(ballot);
    uint count = subgroupBallotBitCount(ballot);

    // write result
    if (accept){ meshlet_indices[index] = mi; }
    if (ti == 0){ gl_TaskCountNV = count; }

#else
    meshlet_indices[ti] = mi;
    if (ti == 0){ gl_TaskCountNV = LOCAL_SIZE; }
#endif
}