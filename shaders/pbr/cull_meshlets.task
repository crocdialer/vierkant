#version 460
#extension GL_EXT_mesh_shader : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference2: require
#extension GL_KHR_shader_subgroup_ballot: require

#include "../renderer/types.glsl"
#include "../renderer/mesh_task_payload.glsl"
#include "../utils/camera.glsl"
#include "../utils/project_sphere.glsl"

//! specialization constant for main/post pass
layout (constant_id = 2) const bool post_pass = false;

layout(set = 0, binding = BINDING_DRAW_COMMANDS) readonly buffer DrawBuffer
{
    indexed_indirect_command_t draw_commands[];
};

layout(set = 0, binding = BINDING_MESHLETS) readonly buffer MeshletBuffer
{
    meshlet_t meshlets[];
};

layout(std140, set = 0, binding = BINDING_MESH_DRAWS) readonly buffer MeshDrawBuffer
{
    mesh_draw_t draws[];
};

// read/write meshlet-visibility buffer
layout(binding = BINDING_MESHLET_VISIBILITY, set = 0) buffer MeshletVisibilities
{
    uint meshlet_visibilities[];
};

layout(std140, binding = BINDING_JITTER_OFFSET) uniform UBOJitter
{
    camera_t camera;
    camera_t last_camera;
};

layout(std140, set = 0, binding = BINDING_MATERIAL) readonly buffer MaterialBuffer
{
    material_struct_t materials[];
};

layout(set = 0, binding = BINDING_DEPTH_PYRAMID) uniform sampler2D u_depth_pyramid;

layout(push_constant) uniform PushConstants
{
    render_context_t context;
};

taskPayloadSharedEXT mesh_task_payload_t task_payload;

// NOTE: local_size_x_id coming from specialization-constant
layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

//! return true if the cone is facing away from camera_position and should be culled
bool cone_cull(vec3 center, float radius, vec3 cone_axis, float cone_cutoff, vec3 camera_position)
{
    return dot(center - camera_position, cone_axis) >= cone_cutoff * length(center - camera_position) + radius;
}

bool is_visible(uint visibility_base_index, uint meshlet_index)
{
    return (meshlet_visibilities[visibility_base_index + (meshlet_index >> 5)] & (1 << (meshlet_index & 31U))) != 0;
}

void set_visible(uint visibility_base_index, uint meshlet_index, bool visible)
{
    if(visible)
    {
        atomicOr(meshlet_visibilities[visibility_base_index + (meshlet_index >> 5)], 1 << (meshlet_index & 31U));
    }
    else
    {
        atomicAnd(meshlet_visibilities[visibility_base_index + (meshlet_index >> 5)], ~(1 << (meshlet_index & 31U)));
    }
}

#define CULLING 1

void main()
{
    uint gid = gl_GlobalInvocationID.x;
    const indexed_indirect_command_t draw_command = draw_commands[context.base_draw_index + gl_DrawID];
    if(gid >= draw_command.num_meshlets){ return; }

    uint object_index = draw_command.object_index;
    uint meshlet_base_index = gl_WorkGroupID.x * gl_WorkGroupSize.x + draw_command.base_meshlet;

    uint ti = gl_LocalInvocationID.x;
    uint mi = meshlet_base_index + ti;

    // write payload base-indices
    task_payload.object_index = object_index;
    task_payload.meshlet_base_index = meshlet_base_index;

#if CULLING

    bool visible = true;
    bool visible_last_frame = is_visible(draw_command.meshlet_visibility_index, mi);
    barrier();

    // occlusion-culling / visibility recording
    if(post_pass)
    {
        mesh_draw_t draw = draws[object_index];

        // transform bounding volume and normal-cone
        mat4 m = camera.view * mat4_cast(draw.current_matrices.transform);
        vec3 cone_axis = normalize(mat3(m) * meshlets[mi].cone_axis);
        float cone_cutoff = meshlets[mi].cone_cutoff;
        vec3 center = (m * vec4(meshlets[mi].sphere_center, 1.0)).xyz;
        float radius = meshlets[mi].sphere_radius * max(max(abs(draw.current_matrices.transform.scale_x),
                                                            abs(draw.current_matrices.transform.scale_y)),
                                                        abs(draw.current_matrices.transform.scale_z));

        // cone-culling
        visible = materials[draw.material_index].two_sided ||
                  !cone_cull(center, radius, cone_axis, cone_cutoff, vec3(0));

        // frustum-culling
        visible = visible && !frustum_cull(center, radius, camera.frustum);

        vec4 aabb;
        bool sphere_visible = project_sphere(center, radius, camera.near, camera.projection[0][0],
                                             camera.projection[1][1], aabb);
        // cluster bound area in NDC
        vec2 screen_area = aabb.zw - aabb.xy;
        vec2 pyramid_size = textureSize(u_depth_pyramid, 0);

        // contribution-culling
        if(visible && sphere_visible)
        {
            // contribution cull (based on screen-area threshold, ~1 px)
            const float size_thresh = 1.0 / pyramid_size.x;
            visible = max(screen_area.x, screen_area.y) >= size_thresh;
        }

        // occlusion-culling
        if(visible && sphere_visible)
        {
            float width = screen_area.x * pyramid_size.x;
            float height = screen_area.y * pyramid_size.y;
            float level = floor(log2(max(width, height)));

            // Sampler is set up to do min reduction, so this computes the minimum depth of a 2x2 texel quad
            float depth = clamp(camera.near / textureLod(u_depth_pyramid, (aabb.xy + aabb.zw) * 0.5, level).x,
                                camera.near, camera.far);
            float depth_sphere = -center.z - radius;

            visible = depth_sphere <= depth;
        }

        // became visible this frame -> not drawn in 1st-pass
        bool needs_post_draw = visible && !visible_last_frame;
        //    if(!visible){ atomicAdd(cull_data.draw_result.v.num_occlusion_culled, 1); }

        // update visiblity
        set_visible(draw_command.meshlet_visibility_index, mi, visible);

        // post_draw
        visible = needs_post_draw;
    }
    else{ visible = visible_last_frame; }

    // determine indices/count via ballot
    uvec4 ballot = subgroupBallot(visible);
    uint index = subgroupBallotExclusiveBitCount(ballot);
    uint count = subgroupBallotBitCount(ballot);

    // write payload delta-index
    if (visible){ task_payload.meshlet_delta_indices[index] = uint8_t(ti); }
    EmitMeshTasksEXT(count, 1, 1);

#else
    task_payload.meshlet_delta_indices[ti] = uint8_t(ti);

    // TODO: wonky, emitting too many meshlets in last workgroup
    uint count = gl_WorkGroupSize.x;
    EmitMeshTasksEXT(count, 1, 1);
#endif
}
