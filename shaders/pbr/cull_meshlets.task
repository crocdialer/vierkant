#version 460
#extension GL_EXT_mesh_shader : require
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_ballot: require

#include "../renderer/types.glsl"
#include "../utils/camera.glsl"

//! nv-specific warp-value (use 64 for AMD)
#define LOCAL_SIZE 32

layout(set = 0, binding = BINDING_DRAW_COMMANDS) readonly buffer DrawBuffer
{
    indexed_indirect_command_t draw_commands[];
};

layout(set = 0, binding = BINDING_MESHLETS) readonly buffer MeshletBuffer
{
    meshlet_t meshlets[];
};

layout(std140, set = 0, binding = BINDING_MESH_DRAWS) readonly buffer MeshDrawBuffer
{
    mesh_draw_t draws[];
};

layout(std140, binding = BINDING_JITTER_OFFSET) uniform UBOJitter
{
    camera_t camera;
    camera_t last_camera;
};

layout(push_constant) uniform PushConstants
{
    render_context_t context;
};

//out taskNV TaskBuffer
//{
//    uint meshlet_indices[LOCAL_SIZE];
//    uint object_index;
//};
taskPayloadSharedEXT mesh_task_payload_t task_payload;

layout(local_size_x = LOCAL_SIZE, local_size_y = 1, local_size_z = 1) in;

bool cone_cull(vec3 center, float radius, vec3 cone_axis, float cone_cutoff, vec3 camera_position)
{
    return dot(center - camera_position, cone_axis) >= cone_cutoff * length(center - camera_position) + radius;
}

#define CULLING 1

void main()
{
    uint gid = gl_GlobalInvocationID.x;
    const indexed_indirect_command_t draw_command = draw_commands[context.base_draw_index + gl_DrawID];

    uint ti = gl_LocalInvocationID.x;
    uint mi = draw_command.base_meshlet + gid;
    uint object_index = draw_command.object_index;
    task_payload.object_index = object_index;

#if CULLING
    // transform bounding volume and normal-cone
    mat4 m = camera.view * draws[object_index].current_matrices.modelview;
    vec3 cone_axis = normalize(mat3(m) * meshlets[mi].cone_axis);
    float cone_cutoff = meshlets[mi].cone_cutoff;
    vec3 center = (m * vec4(meshlets[mi].sphere_center, 1.0)).xyz;
    float radius = meshlets[mi].sphere_radius * length(m[0].xyz);

    // backface-culling
    bool accept = gid >= draw_command.num_meshlets && !cone_cull(center, radius, cone_axis, cone_cutoff, vec3(0));

    // frustum-culling
    accept = accept && !frustum_cull(center, radius, camera.frustum);

    // determine indices/count via ballot
    uvec4 ballot = subgroupBallot(accept);
    uint index = subgroupBallotExclusiveBitCount(ballot);
    uint count = subgroupBallotBitCount(ballot);

    // write result
    if (accept){ task_payload.meshlet_indices[index] = mi; }
    if (ti == 0){ EmitMeshTasksEXT(count, 1, 1); }

#else
    task_payload.meshlet_indices[ti] = mi;
    if (ti == 0){ EmitMeshTasksEXT(LOCAL_SIZE, 1, 1); }
#endif
}