#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64: require
#extension GL_EXT_buffer_reference2: require

#include "../renderer/types.glsl"
#include "../utils/camera.glsl"

struct draw_cull_result_t
{
    uint num_draws;
    uint num_frustum_culled;
    uint num_occlusion_culled;
    uint num_distance_culled;
    uint num_triangles;
};

layout(buffer_reference, std430) buffer DrawBufferPtr{ indexed_indirect_command_t v[]; };
layout(buffer_reference, std430) buffer readonly MeshDrawBufferPtr{ mesh_draw_t v[]; };
layout(buffer_reference, std430) buffer readonly MeshEntryBufferPtr{ mesh_entry_t v[]; };
layout(buffer_reference, std430) buffer DrawCountBufferPtr{ uint v[]; };
layout(buffer_reference, std430) buffer DrawResultPtr{ draw_cull_result_t v; };

struct draw_cull_data_t
{
    mat4 view;

    //! symmetric projection parameters
    float P00, P11, znear, zfar;

    //! left/right/top/bottom frustum planes
    vec4 frustum;

    uint num_draws;

    //! base screenspace-area for LoD-0
    float lod_base;

    //! step/factor for LoD-selection
    float lod_step;

    //! limit the number of LoDs to use
    uint max_num_lods;

    //! depth pyramid size in texels
    vec2 pyramid_size;

    bool frustum_cull;
    bool occlusion_cull;
    bool distance_cull;
    bool backface_cull;
    bool lod_enabled;

    // buffer references
    DrawBufferPtr draws_in;
    MeshDrawBufferPtr mesh_draws_in;
    MeshEntryBufferPtr mesh_entries_in;
    DrawBufferPtr draws_out_pre;
    DrawBufferPtr draws_out_post;
    DrawCountBufferPtr draw_count_pre;
    DrawCountBufferPtr draw_count_post;
    DrawResultPtr draw_result;
};

// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere. Michael Mara, Morgan McGuire. 2013
bool project_sphere(vec3 C, float r, float znear, float P00, float P11, out vec4 aabb)
{
    if (-C.z < r + znear){ return false; }

    vec2 cx = vec2(-C.x, C.z);
    vec2 vx = vec2(sqrt(dot(cx, cx) - r * r), r);
    vec2 minx = mat2(vx.x, vx.y, -vx.y, vx.x) * cx;
    vec2 maxx = mat2(vx.x, -vx.y, vx.y, vx.x) * cx;

    vec2 cy = C.yz;
    vec2 vy = vec2(sqrt(dot(cy, cy) - r * r), r);
    vec2 miny = mat2(vy.x, vy.y, -vy.y, vy.x) * cy;
    vec2 maxy = mat2(vy.x, -vy.y, vy.y, vy.x) * cy;

    aabb = vec4(minx.x / minx.y * P00, miny.x / miny.y * P11, maxx.x / maxx.y * P00, maxy.x / maxy.y * P11);
    aabb = aabb * vec4(0.5f, -0.5f, 0.5f, -0.5f) + vec4(0.5f); // clip space -> uv space

    return true;
}

layout(binding = 0) uniform sampler2D u_depth_pyramid;

layout(std140, binding = 1) uniform culldata_ubo_t{ draw_cull_data_t cull_data; };

layout(local_size_x = 32) in;

void main()
{
    uint gid = gl_GlobalInvocationID.x;
    if(gid >= cull_data.num_draws){ return; }

    // simple pass-through
    indexed_indirect_command_t draw = cull_data.draws_in.v[gid];

    mesh_draw_t mesh_draw = cull_data.mesh_draws_in.v[draw.object_index];
    mesh_entry_t mesh_entry = cull_data.mesh_entries_in.v[mesh_draw.mesh_index];

    vec3 center = (cull_data.view * mesh_draw.current_matrices.modelview * vec4(mesh_entry.center, 1.0)).xyz;
    float radius = mesh_entry.radius * length(mesh_draw.current_matrices.modelview[0].xyz);

    bool visible = true;

    // 2D-screenspace AABB for a 3D-boundingsphere
    vec4 aabb;
    bool sphere_visible = project_sphere(center, radius, cull_data.znear, cull_data.P00, cull_data.P11, aabb);

    if(cull_data.frustum_cull)
    {
        // the left/top/right/bottom plane culling utilizes frustum symmetry to cull against two planes at the same time
        visible = visible && !frustum_cull(center, radius, cull_data.frustum);

        if(!visible){ atomicAdd(cull_data.draw_result.v.num_frustum_culled, 1); }
    }

    if(visible && cull_data.distance_cull)
    {
        visible = visible && (-center.z - radius) <= cull_data.zfar;
        if(!visible){ atomicAdd(cull_data.draw_result.v.num_distance_culled, 1); }
    }

    if(visible && cull_data.occlusion_cull && sphere_visible)
    {
        // get cracking with depth-pyramid
        float width = (aabb.z - aabb.x) * cull_data.pyramid_size.x;
        float height = (aabb.w - aabb.y) * cull_data.pyramid_size.y;

        float level = floor(log2(max(width, height)));

        // Sampler is set up to do min reduction, so this computes the minimum depth of a 2x2 texel quad
        float depth = textureLod(u_depth_pyramid, (aabb.xy + aabb.zw) * 0.5, level).x;
        float depth_sphere = cull_data.znear / (-center.z - radius);

        visible = visible && (depth_sphere >= depth);
        if(!visible){ atomicAdd(cull_data.draw_result.v.num_occlusion_culled, 1); }
    }

    // lod managment
    if(visible && cull_data.lod_enabled)
    {
        float aabb_area = (aabb.z - aabb.x) * (aabb.w - aabb.y);
        float lod_index_f = log2(cull_data.lod_base / aabb_area) / log2(cull_data.lod_step);

        uint max_lod_index = (cull_data.max_num_lods > 0 ? min(cull_data.max_num_lods, mesh_entry.lod_count)
                                                         : mesh_entry.lod_count) - 1;
        uint lod_index = sphere_visible ? clamp(uint(lod_index_f + 1), 0, max_lod_index) : 0;

        // select lod
        lod_t lod = mesh_entry.lods[lod_index];

        draw.vertexOffset = int(mesh_entry.vertex_offset);
        draw.indexCount = lod.num_indices;
        draw.firstIndex = lod.base_index;
        draw.groupCountX = (lod.num_meshlets + 31) / 32;
        draw.groupCountY = draw.groupCountZ = 1;
        draw.base_meshlet = lod.base_meshlet;
        draw.num_meshlets = lod.num_meshlets;
    }

    // count managment
    if(visible)
    {
        atomicAdd(cull_data.draw_result.v.num_draws, 1);
        atomicAdd(cull_data.draw_result.v.num_triangles, draw.indexCount / 3);

        // became visible this frame -> not drawn in 1st-pass
        if(!cull_data.draws_in.v[gid].visible)
        {
            uint draw_cmd_offset_post = atomicAdd(cull_data.draw_count_post.v[draw.count_buffer_offset], 1);
            cull_data.draws_out_post.v[draw.first_draw_index + draw_cmd_offset_post] = draw;
        }

        uint draw_cmd_offset = atomicAdd(cull_data.draw_count_pre.v[draw.count_buffer_offset], 1);
        cull_data.draws_out_pre.v[draw.first_draw_index + draw_cmd_offset] = draw;
    }

    // record visiblity
    cull_data.draws_in.v[gid].visible = visible;
}