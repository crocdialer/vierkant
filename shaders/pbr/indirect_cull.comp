#version 460

#extension GL_GOOGLE_include_directive : require

struct draw_cull_data_t
{
    mat4 view;
    float P00, P11, znear, zfar;// symmetric projection parameters
    vec4 frustum;// data for left/right/top/bottom frustum planes

    vec2 pyramid_size;// depth pyramid size in texels

    uint draw_count;

    bool culling_enabled;
    bool lod_enabled;
    bool occlusion_enabled;
    bool distance_cull;
};

struct IndexedIndirectCommand
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int  vertexOffset;
    uint firstInstance;

    uint object_index;
    vec4 sphere_bounds;
};

struct draw_cull_result_t
{
    uint draw_count;
    uint num_frustum_culled;
    uint num_occlusion_culled;
    uint num_distance_culled;
};

// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere. Michael Mara, Morgan McGuire. 2013
bool project_sphere(vec3 C, float r, float znear, float P00, float P11, out vec4 aabb)
{
    if (C.z < r + znear){ return false; }

    vec2 cx = -C.xz;
    vec2 vx = vec2(sqrt(dot(cx, cx) - r * r), r);
    vec2 minx = mat2(vx.x, vx.y, -vx.y, vx.x) * cx;
    vec2 maxx = mat2(vx.x, -vx.y, vx.y, vx.x) * cx;

    vec2 cy = -C.yz;
    vec2 vy = vec2(sqrt(dot(cy, cy) - r * r), r);
    vec2 miny = mat2(vy.x, vy.y, -vy.y, vy.x) * cy;
    vec2 maxy = mat2(vy.x, -vy.y, vy.y, vy.x) * cy;

    aabb = vec4(minx.x / minx.y * P00, miny.x / miny.y * P11, maxx.x / maxx.y * P00, maxy.x / maxy.y * P11);
    aabb = aabb.xwzy * vec4(0.5f, -0.5f, 0.5f, -0.5f) + vec4(0.5f); // clip space -> uv space

    return true;
}

layout(binding = 0) uniform sampler2D u_depth_pyramid;

layout(std140, binding = 1) uniform culldata_ubo_t
{
    draw_cull_data_t cull_data;
};

// input draw indirect buffer
layout(binding = 2) readonly buffer DrawBufferIn
{
    IndexedIndirectCommand in_draw_data[];
};

// output draw indirect buffer
layout(binding = 3) writeonly buffer DrawBufferOut
{
    IndexedIndirectCommand out_draw_data[];
};

// output draw indirect buffer
layout(binding = 4) buffer DrawResult
{
    draw_cull_result_t result;
};

layout(local_size_x = 256) in;

void main()
{
    uint gid = gl_GlobalInvocationID.x;
    if(gid >= cull_data.draw_count){ return; }

    // simple pass-through
    IndexedIndirectCommand draw = in_draw_data[gid];

    bool visible = true;

    vec3 center = draw.sphere_bounds.xyz;
    float radius = draw.sphere_bounds.w;

    if(cull_data.culling_enabled)
    {
        // the left/top/right/bottom plane culling utilizes frustum symmetry to cull against two planes at the same time
        visible = visible && center.z * cull_data.frustum[1] - abs(center.x) * cull_data.frustum[0] > -radius;
        visible = visible && center.z * cull_data.frustum[3] - abs(center.y) * cull_data.frustum[2] > -radius;

        if(!visible){ atomicAdd(result.num_frustum_culled, 1); }
    }

    if(visible && cull_data.distance_cull)
    {
        visible = visible && (-center.z - radius) <= cull_data.zfar;
        if(!visible){ atomicAdd(result.num_distance_culled, 1); }
    }

    if(visible && cull_data.occlusion_enabled)
    {
        // 2D-screenspace AABB for a 3D-boundingsphere
        vec4 aabb;

        // some adjustment for handedness
        center.yz *= -1;

        // get cracking with depth-pyramid
        if(project_sphere(center, radius, cull_data.znear, cull_data.P00, cull_data.P11, aabb))
        {
            float width = (aabb.z - aabb.x) * cull_data.pyramid_size.x;
            float height = (aabb.w - aabb.y) * cull_data.pyramid_size.y;

            float level = floor(log2(max(width, height)));

            // Sampler is set up to do min reduction, so this computes the minimum depth of a 2x2 texel quad
            float depth = textureLod(u_depth_pyramid, (aabb.xy + aabb.zw) * 0.5, level).x;
            float depth_sphere = cull_data.znear / (center.z - radius);

            visible = visible && (depth_sphere >= depth);
            if(!visible){ atomicAdd(result.num_occlusion_culled, 1); }
        }
    }

    if(!visible){ draw.instanceCount = draw.indexCount = 0; }

    atomicAdd(result.draw_count, 1);

    out_draw_data[gid] = draw;
}