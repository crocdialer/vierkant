#version 460
#extension GL_EXT_buffer_reference2: require
#extension GL_GOOGLE_include_directive : require

#include "../utils/constants.glsl"

layout(buffer_reference, std430) buffer readonly ObjectIdPtr{ uint v[]; };

struct object_overlay_params_t
{
    ObjectIdPtr object_ids;
    uint num_object_ids;
    bool silhouette;
};

layout(binding = 0, r16ui) readonly uniform uimage2D in_object_id_img;

layout(binding = 1) writeonly uniform image2D out_mask_img;

layout(std140, binding = 2) uniform UniformBuffer
{
    object_overlay_params_t params;
};

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

bool contains(const object_overlay_params_t params, uint object_id)
{
    for(uint i = 0; i < params.num_object_ids; ++i)
    {
        if(object_id == params.object_ids.v[i]){ return true; }
    }
    return false;
}

float sobel_edge(ivec2 coord)
{
    // sobel
    float n[9];
    n[0] = float(contains(params, MAX_UINT16 - imageLoad(in_object_id_img, coord + ivec2(-1, -1)).x));
    n[1] = float(contains(params, MAX_UINT16 - imageLoad(in_object_id_img, coord + ivec2(0, -1)).x));
    n[2] = float(contains(params, MAX_UINT16 - imageLoad(in_object_id_img, coord + ivec2(1, -1)).x));
    n[3] = float(contains(params, MAX_UINT16 - imageLoad(in_object_id_img, coord + ivec2(-1, 0)).x));
    n[4] = float(contains(params, MAX_UINT16 - imageLoad(in_object_id_img, coord + ivec2(0, 0)).x));
    n[5] = float(contains(params, MAX_UINT16 - imageLoad(in_object_id_img, coord + ivec2(1, 0)).x));
    n[6] = float(contains(params, MAX_UINT16 - imageLoad(in_object_id_img, coord + ivec2(-1, 1)).x));
    n[7] = float(contains(params, MAX_UINT16 - imageLoad(in_object_id_img, coord + ivec2(0, 1)).x));
    n[8] = float(contains(params, MAX_UINT16 - imageLoad(in_object_id_img, coord + ivec2(1, 1)).x));
    float sobel_edge_h = n[2] + (2.0 * n[5]) + n[8] - (n[0] + (2.0 * n[3]) + n[6]);
    float sobel_edge_v = n[0] + (2.0 * n[1]) + n[2] - (n[6] + (2.0 * n[7]) + n[8]);
    return sqrt((sobel_edge_h * sobel_edge_h) + (sobel_edge_v * sobel_edge_v));
}

void main()
{
    ivec2 out_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 in_coords = ivec2(imageSize(in_object_id_img) * out_coords / vec2(imageSize(out_mask_img)));

    float result = 0.0;

    if(params.silhouette)
    {
        result = sobel_edge(in_coords);
    }
    else
    {
        // retrieve stored object-id
        uint object_id = MAX_UINT16 - imageLoad(in_object_id_img, in_coords).x;

        // generate binary mask
        result = float(contains(params, object_id));
    }

    // store mask/silhouette value for selected objects
    imageStore(out_mask_img, out_coords, vec4(result));
}