#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64: require
#extension GL_EXT_buffer_reference2: require

#include "../renderer/types.glsl"
#include "../renderer/mesh_task_payload.glsl"
#include "../utils/camera.glsl"
#include "../utils/project_sphere.glsl"

struct draw_cull_result_t
{
    uint draw_count;
    uint num_visible;
    uint num_frustum_culled;
    uint num_occlusion_culled;
    uint num_contribution_culled;
    uint num_triangles;
    uint num_meshlets;
};

layout(buffer_reference, std430) buffer DrawBufferPtr{ indexed_indirect_command_t v[]; };
layout(buffer_reference, std430) buffer MeshDrawBufferPtr{ mesh_draw_t v[]; };
layout(buffer_reference, std430) buffer readonly MeshEntryBufferPtr{ mesh_entry_t v[]; };
layout(buffer_reference, std430) buffer DrawCountBufferPtr{ uint v[]; };
layout(buffer_reference, std430) buffer DrawCommandIndexBufferPtr{ uint v[]; };
layout(buffer_reference, std430) buffer DrawResultPtr{ draw_cull_result_t v; };

struct draw_cull_data_t
{
    mat4 view;

    //! symmetric projection parameters
    float P00, P11, znear, zfar;

    //! left/right/top/bottom frustum planes
    vec4 frustum;

    // buffer references
    DrawBufferPtr draws_in;
    DrawBufferPtr draws_in_post;
    MeshDrawBufferPtr mesh_draws_in;
    MeshEntryBufferPtr mesh_entries_in;
    DrawBufferPtr draws_out_pre;
    DrawBufferPtr draws_out_post;
    DrawCountBufferPtr draw_count_pre;
    DrawCountBufferPtr draw_count_post;
    DrawCommandIndexBufferPtr draw_command_indices_in_post;
    DrawResultPtr draw_result;

    uint num_draws;

    //! base screenspace-area for LoD-0
    float lod_base;

    //! step/factor for LoD-selection
    float lod_step;

    //! limit the number of LoDs to use
    uint max_num_lods;

    //! depth pyramid size in texels
    vec2 pyramid_size;

    bool ortho;
    bool frustum_cull;
    bool occlusion_cull;
    bool contribution_cull;

    // do not cull objects cntaining meshlets
    bool use_meshlets;

    bool lod_enabled;

    uint task_workgroup_size;
};

uint div_up(uint nom, uint denom) { return (nom + denom - 1) / denom; }

layout(binding = 0) uniform sampler2D u_depth_pyramid;

layout(std140, binding = 1) uniform culldata_ubo_t{ draw_cull_data_t cull_data; };

layout(local_size_x = 32) in;

void main()
{
    uint gid = gl_GlobalInvocationID.x;
    if(gid >= cull_data.num_draws){ return; }

    // originial draw-commands from pre-pass
    indexed_indirect_command_t draw = cull_data.draws_in.v[gid];
    atomicAdd(cull_data.draw_result.v.draw_count, 1);

    mesh_draw_t mesh_draw = cull_data.mesh_draws_in.v[draw.object_index];
    mesh_entry_t mesh_entry = cull_data.mesh_entries_in.v[mesh_draw.mesh_index];

    vec3 center = (cull_data.view * vec4(apply_transform(mesh_draw.current_matrices.transform, mesh_entry.center), 1.0)).xyz;
    float radius = mesh_entry.radius * max(max(abs(mesh_draw.current_matrices.transform.scale_x),
                                               abs(mesh_draw.current_matrices.transform.scale_y)),
                                           abs(mesh_draw.current_matrices.transform.scale_z));

    bool visible = has_flag(draw.flags, DRAW_COMMAND_FLAG_ENABLED);
    bool meshlet_draw = cull_data.use_meshlets && has_flag(draw.flags, DRAW_COMMAND_FLAG_MESHLETS);

    // uv-screenspace AABB for a 3D-boundingsphere
    vec4 aabb = vec4(0, 0, 1, 1);
    bool sphere_visible = project_sphere(center, radius, cull_data.znear, cull_data.P00, cull_data.P11, aabb);

    if(cull_data.ortho)
    {
        sphere_visible = project_sphere_ortho(center, radius, cull_data.znear, cull_data.frustum, aabb);
    }

    // object bound's area in NDC
    vec2 screen_area = aabb.zw - aabb.xy;

    if(visible && cull_data.frustum_cull)
    {
        // (perspective) left/top/right/bottom plane culling utilizes frustum symmetry to cull against two planes at the same time
        bool inside_frustum = cull_data.ortho ? !frustum_cull_ortho(center, radius, cull_data.frustum) :
                                                !frustum_cull(center, radius, cull_data.frustum);

        visible = visible && inside_frustum;

        if(!visible){ atomicAdd(cull_data.draw_result.v.num_frustum_culled, 1); }
    }

    if(visible && cull_data.contribution_cull && sphere_visible)
    {
        // contribution cull (based on screen-area threshold, ~1 px)
        const float size_thresh = 1.0 / cull_data.pyramid_size.x;
        visible = visible && max(screen_area.x, screen_area.y) >= size_thresh;

        if(!visible){ atomicAdd(cull_data.draw_result.v.num_contribution_culled, 1); }
    }

    if(visible && cull_data.occlusion_cull && sphere_visible)
    {
        // get cracking with depth-pyramid
        float width = screen_area.x * cull_data.pyramid_size.x;
        float height = screen_area.y * cull_data.pyramid_size.y;

        float level = floor(log2(max(width, height)));

        // Sampler is set up to do min reduction, so this computes the minimum depth of a 2x2 texel quad
        float depth = textureLod(u_depth_pyramid, (aabb.xy + aabb.zw) * 0.5, level).x;
        depth = cull_data.ortho ? mix(cull_data.zfar, cull_data.znear, depth) :
                                  clamp(cull_data.znear / depth, cull_data.znear, cull_data.zfar);
        float depth_sphere = -center.z - radius;

        visible = depth_sphere <= depth;
        if(!visible){ atomicAdd(cull_data.draw_result.v.num_occlusion_culled, 1); }
    }

    // lod managment
    if(visible && cull_data.lod_enabled)
    {
        float aabb_area = (aabb.z - aabb.x) * (aabb.w - aabb.y);
        float lod_index_f = log2(cull_data.lod_base / aabb_area) / log2(cull_data.lod_step);

        uint max_lod_index = min(mesh_entry.lod_count, MAX_NUM_MESH_LODS) - 1;
        max_lod_index = cull_data.max_num_lods > 0 ? min(max_lod_index, cull_data.max_num_lods - 1) : max_lod_index;
        uint lod_index = sphere_visible ? clamp(uint(lod_index_f + 1), 0, max_lod_index) : 0;

        // write back lod_index
        cull_data.mesh_draws_in.v[draw.object_index].lod_index = lod_index; 

        // select lod
        lod_t lod = mesh_entry.lods[lod_index];

        draw.vertexOffset = int(mesh_entry.vertex_offset);
        draw.indexCount = lod.num_indices;
        draw.firstIndex = lod.base_index;
        draw.groupCountX = div_up(lod.num_meshlets, cull_data.task_workgroup_size);
        draw.groupCountY = draw.groupCountZ = 1;
        draw.base_meshlet = lod.base_meshlet;
        draw.num_meshlets = lod.num_meshlets;
    }

    // count managment
    if(visible)
    {
        atomicAdd(cull_data.draw_result.v.num_visible, 1);
        atomicAdd(cull_data.draw_result.v.num_triangles, draw.indexCount / 3);
        atomicAdd(cull_data.draw_result.v.num_meshlets, draw.num_meshlets);

        // became visible this frame -> not drawn in 1st-pass
        bool needs_post_draw = !has_flag(draw.flags, DRAW_COMMAND_FLAG_VISIBLE);

        // prepass: increment and get output index
        uint draw_cmd_offset = atomicAdd(cull_data.draw_count_pre.v[draw.count_buffer_offset], 1);
        cull_data.draws_out_pre.v[draw.first_draw_index + draw_cmd_offset] = draw;

        if(needs_post_draw || meshlet_draw)
        {
            // force visibility after lod-change
            set_flag(draw.flags, DRAW_COMMAND_FLAG_LATE_VISIBLE, needs_post_draw ||
                     (meshlet_draw && (draw.base_meshlet != cull_data.draws_in.v[gid].base_meshlet)));

            // map to post-draw-idx
            uint draw_cmd_index_post = cull_data.draw_command_indices_in_post.v[draw.object_index];

            // get count-buffer offset for post-draw command
            draw.count_buffer_offset = cull_data.draws_in_post.v[draw_cmd_index_post].count_buffer_offset;
            draw.first_draw_index = cull_data.draws_in_post.v[draw_cmd_index_post].first_draw_index;

            // postpass: increment and get output index
            uint draw_cmd_offset_post = atomicAdd(cull_data.draw_count_post.v[draw.count_buffer_offset], 1);
            cull_data.draws_out_post.v[draw.first_draw_index + draw_cmd_offset_post] = draw;
        }
    }

    // update visiblity
    set_flag(cull_data.draws_in.v[gid].flags, DRAW_COMMAND_FLAG_VISIBLE, visible);
    cull_data.draws_in.v[gid].base_meshlet = draw.base_meshlet;
}