#version 460

#extension GL_GOOGLE_include_directive : require

#define COLOR 0
#define NORMALS 1
#define POSITIONS 2

layout(binding = 0, rgba32f) readonly uniform image2D u_input[3];

layout(binding = 1, rgba32f) writeonly uniform image2D u_out_image;

layout(local_size_x = 16, local_size_y = 16) in;

//! edge-avoiding Ã€-TrousWavelet for denoising
vec4 denoise(ivec2 coords)
{
    const float kernel[25] = float[25](
    1.0/256.0, 1.0/64.0, 3.0/128.0, 1.0/64.0, 1.0/256.0,
    1.0/64.0,  1.0/16.0, 3.0/32.0,  1.0/16.0, 1.0/64.0,
    3.0/128.0, 3.0/32.0, 9.0/64.0,  3.0/32.0, 3.0/128.0,
    1.0/64.0,  1.0/16.0, 3.0/32.0,  1.0/16.0, 1.0/64.0,
    1.0/256.0, 1.0/64.0, 3.0/128.0, 1.0/64.0, 1.0/256.0 );

    const ivec2 offset[25] = ivec2[25](
    ivec2(-2,-2), ivec2(-1,-2), ivec2(0,-2), ivec2(1,-2), ivec2(2,-2),
    ivec2(-2,-1), ivec2(-1,-1), ivec2(0,-2), ivec2(1,-1), ivec2(2,-1),
    ivec2(-2, 0), ivec2(-1, 0), ivec2(0, 0), ivec2(1, 0), ivec2(2, 0),
    ivec2(-2, 1), ivec2(-1, 1), ivec2(0, 1), ivec2(1, 1), ivec2(2, 1),
    ivec2(-2, 2), ivec2(-1, 2), ivec2(0, 2), ivec2(1, 2), ivec2(2, 2) );

    vec2 fragCoord = coords;
    vec3 sum = vec3(0.0);
    float colorPhi = 1.0 / .9f; //ubo.colorPhi;
    float normalPhi = 1.0 / .3f; // ubo.normalPhi;
    float positionPhi = 1.0 / .6f; //ubo.positionPhi;

    vec3 cval = imageLoad(u_input[COLOR], coords).rgb;     // color
    vec3 nval = imageLoad(u_input[NORMALS], coords).rgb;   // normal
    vec3 pval = imageLoad(u_input[POSITIONS], coords).rgb; // position

    float cum_w = 0.0;

    for(uint i = 0; i < 25; ++i)
    {
        ivec2 uv = ivec2(fragCoord + offset[i] * 2);

        // Color
        vec3 ctmp = imageLoad(u_input[COLOR], uv).rgb;
        vec3 t = cval - ctmp;							// Ip - Iq		(color difference)
        float dist2 = dot(t, t);						// ||Ip - Iq||	(distance squared)
        float c_w = min(exp(-(dist2) * colorPhi), 1.0); // w(p,q)		(weight function)

        vec3 ntmp = imageLoad(u_input[NORMALS], uv).rgb;
        t = nval - ntmp;
        dist2 = dot(t, t);
        float n_w = min(exp(-(dist2) * normalPhi), 1.0);

        vec3 ptmp = imageLoad(u_input[POSITIONS], uv).rgb;
        t = pval - ptmp;
        dist2 = dot(t, t);
        float p_w = min(exp(-(dist2) * positionPhi), 1.0);

        float weight = c_w * n_w * p_w * kernel[i];
        sum += ctmp * weight;
        cum_w += weight;
    }
    return vec4(sum / cum_w, 0.f);
}

void main()
{
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
    imageStore(u_out_image, coords, denoise(coords));
}